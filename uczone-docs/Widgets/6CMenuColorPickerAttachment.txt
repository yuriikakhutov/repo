# CMenuColorPickerAttachment

CMenuColorPickerAttachment metatable.

## <sub>Name</sub>

`:Name():` <mark style="color:purple;">**`string`**</mark>

Returns widget's name.

## <sub>Parent</sub>

`:Parent():` [<mark style="color:purple;">**`CMenuSwitch`**</mark>](cmenuswitch) | [<mark style="color:purple;">**`CMenuSliderInt`**</mark>](cmenusliderint) | [<mark style="color:purple;">**`CMenuSliderFloat`**</mark>](cmenusliderfloat) | [<mark style="color:purple;">**`CMenuMultiComboBox`**</mark>](cmenumulticombobox) | [<mark style="color:purple;">**`CMenuLabel`**</mark>](https://github.com/Boyarinov/gitbook-doc-parser/blob/main/generated/menu/CMenuLabel.md) | [<mark style="color:purple;">**`CMenuInputBox`**</mark>](cmenuinputbox) | [<mark style="color:purple;">**`CMenuGroup`**</mark>](../menu/cmenugroup) | [<mark style="color:purple;">**`CMenuBind`**</mark>](cmenubind)

Returns widget's parent.

## <sub>Type</sub>

`:Type():` [<mark style="color:purple;">**`Enum.WidgetType`**</mark>](../../../enums#enum.widgettype)

Returns widget type.

## <sub>Open</sub>

`:Open():` <mark style="color:purple;">**`nil`**</mark>

Opens parent tabs.

## <sub>ForceLocalization</sub>

{% hint style="info" %}
Not recommended for use due to its complexity
{% endhint %}

`:ForceLocalization(newText):` <mark style="color:purple;">**`nil`**</mark>

| Name        | Type                                            | Description |
| ----------- | ----------------------------------------------- | ----------- |
| **newText** | <mark style="color:purple;">**`string`**</mark> |             |

Changes text in the widget. The path to the widget is not affected.\
May be used for dynamic text customization or recolor.

## <sub>Visible</sub>

`:Visible(value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                             | Description |
| --------- | ------------------------------------------------ | ----------- |
| **value** | <mark style="color:purple;">**`boolean`**</mark> |             |

Gets or sets visible state. Depends on argument.

#### Example

```lua
-- setter
widget:Visible(false)
```

## <sub>Visible</sub>

`:Visible():` <mark style="color:purple;">**`boolean`**</mark>

#### Example

```lua
-- getter
local isVisible = widget:Visible()
```

## <sub>Disabled</sub>

`:Disabled(value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                             | Description |
| --------- | ------------------------------------------------ | ----------- |
| **value** | <mark style="color:purple;">**`boolean`**</mark> |             |

Gets or sets disabled state. Depends on argument.

#### Example

```lua
-- setter
widget:Disabled( false )
```

## <sub>Disabled</sub>

`:Disabled():` <mark style="color:purple;">**`boolean`**</mark>

#### Example

```lua
-- getter
local isDisabled = widget:Disabled()
```

## <sub>Get</sub>

`:Get():` [<mark style="color:purple;">**`Color`**</mark>](../color)

Returns widget's value.

## <sub>Set</sub>

`:Set(value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                                       | Description |
| --------- | ---------------------------------------------------------- | ----------- |
| **value** | [<mark style="color:purple;">**`Color`**</mark>](../color) |             |

Sets widget's value.

## <sub>SetCallback</sub>

{% hint style="info" %}
Multiple callbacks could be set.
{% endhint %}

\`:SetCallback(callback, \[forceCall]):\` <mark style="color:purple;">\*\*\`nil\`\*\*</mark>

| Name                                                            | Type                                                                               | Description                                                              |
| --------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------ |
| **callback**                                                    | <mark style="color:purple;">**`fun(this: CMenuColorPickerAttachment):nil`**</mark> | function to be called on widget change.                                  |
| **forceCall&#x20;**<mark style="color:orange;">**`[?]`**</mark> | <mark style="color:purple;">**`boolean`**</mark>                                   | true if you want to call callback on widget creation. `(default: false)` |

Sets widget's on change callback.

## <sub>UnsetCallback</sub>

`:UnsetCallback(callback):` <mark style="color:purple;">**`nil`**</mark>

| Name         | Type                                                                               | Description                                     |
| ------------ | ---------------------------------------------------------------------------------- | ----------------------------------------------- |
| **callback** | <mark style="color:purple;">**`fun(this: CMenuColorPickerAttachment):nil`**</mark> | function to be removed from widget's callbacks. |

Removes widget's on change callback.