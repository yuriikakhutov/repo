# CMenuSliderFloat

CMenuSliderFloat metatable.

## <sub>Update</sub>

`:Update(minValue, maxValue, defaultValue):` <mark style="color:purple;">**`nil`**</mark>

| Name             | Type                                            | Description |
| ---------------- | ----------------------------------------------- | ----------- |
| **minValue**     | <mark style="color:purple;">**`number`**</mark> |             |
| **maxValue**     | <mark style="color:purple;">**`number`**</mark> |             |
| **defaultValue** | <mark style="color:purple;">**`number`**</mark> |             |

Updates the slider values.

## <sub>Name</sub>

`:Name():` <mark style="color:purple;">**`string`**</mark>

Returns widget's name.

## <sub>Parent</sub>

`:Parent():` [<mark style="color:purple;">**`CMenuGroup`**</mark>](../menu/cmenugroup) | [<mark style="color:purple;">**`CMenuGearAttachment`**</mark>](cmenugearattachment)

Returns widget's parent.

## <sub>Type</sub>

`:Type():` [<mark style="color:purple;">**`Enum.WidgetType`**</mark>](../../../enums#enum.widgettype)

Returns widget type.

## <sub>Open</sub>

`:Open():` <mark style="color:purple;">**`nil`**</mark>

Opens parent tabs.

## <sub>ForceLocalization</sub>

{% hint style="info" %}
Not recommended for use due to its complexity
{% endhint %}

`:ForceLocalization(newText):` <mark style="color:purple;">**`nil`**</mark>

| Name        | Type                                            | Description |
| ----------- | ----------------------------------------------- | ----------- |
| **newText** | <mark style="color:purple;">**`string`**</mark> |             |

Changes text in the widget. The path to the widget is not affected.\
May be used for dynamic text customization or recolor.

## <sub>ToolTip</sub>

`:ToolTip(newText):` <mark style="color:purple;">**`string`**</mark>

| Name        | Type                                            | Description |
| ----------- | ----------------------------------------------- | ----------- |
| **newText** | <mark style="color:purple;">**`string`**</mark> |             |

Gets or sets tooltip. Tooltip is displayed when mouse cursor is over the widget.\
Depends on the argument.

## <sub>ToolTip</sub>

`:ToolTip():` <mark style="color:purple;">**`string`**</mark>

## <sub>Visible</sub>

`:Visible(value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                             | Description |
| --------- | ------------------------------------------------ | ----------- |
| **value** | <mark style="color:purple;">**`boolean`**</mark> |             |

Gets or sets visible state. Depends on argument.

#### Example

```lua
-- setter
switch:Visible(false)
```

## <sub>Visible</sub>

`:Visible():` <mark style="color:purple;">**`boolean`**</mark>

#### Example

```lua
-- getter
local isVisible = switch:Visible()
```

## <sub>Disabled</sub>

`:Disabled(value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                             | Description |
| --------- | ------------------------------------------------ | ----------- |
| **value** | <mark style="color:purple;">**`boolean`**</mark> |             |

Gets or sets disabled state. Depends on argument.

#### Example

```lua
-- setter
switch:Disabled( false )
```

## <sub>Disabled</sub>

`:Disabled():` <mark style="color:purple;">**`boolean`**</mark>

#### Example

```lua
-- getter
local isDisabled = switch:Disabled()
```

## <sub>Unsafe</sub>

`:Unsafe(value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                             | Description |
| --------- | ------------------------------------------------ | ----------- |
| **value** | <mark style="color:purple;">**`boolean`**</mark> |             |

Gets or sets unsafe state. Unsafe widgets have warning sign.\
Depends on argument.

## <sub>Unsafe</sub>

`:Unsafe():` <mark style="color:purple;">**`boolean`**</mark>

## <sub>Get</sub>

`:Get():` <mark style="color:purple;">**`number`**</mark>

Returns widget's value.

## <sub>Set</sub>

`:Set(value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                            | Description |
| --------- | ----------------------------------------------- | ----------- |
| **value** | <mark style="color:purple;">**`number`**</mark> |             |

Sets widget's value.

## <sub>Image</sub>

`:Image(imagePath, [offset]):` <mark style="color:purple;">**`nil`**</mark>

| Name                                                         | Type                                                          | Description                                    |
| ------------------------------------------------------------ | ------------------------------------------------------------- | ---------------------------------------------- |
| **imagePath**                                                | <mark style="color:purple;">**`string`**</mark>               | Path to the image.                             |
| **offset&#x20;**<mark style="color:orange;">**`[?]`**</mark> | [<mark style="color:purple;">**`Vec2`**</mark>](../math/vec2) | Optional image offset. `(default: {0.0, 0.0})` |

Sets widget's image.

## <sub>ImageHandle</sub>

`:ImageHandle(imageHandle, [offset]):` <mark style="color:purple;">**`nil`**</mark>

| Name                                                         | Type                                                          | Description                                    |
| ------------------------------------------------------------ | ------------------------------------------------------------- | ---------------------------------------------- |
| **imageHandle**                                              | <mark style="color:purple;">**`integer`**</mark>              |                                                |
| **offset&#x20;**<mark style="color:orange;">**`[?]`**</mark> | [<mark style="color:purple;">**`Vec2`**</mark>](../math/vec2) | Optional image offset. `(default: {0.0, 0.0})` |

Sets tab's image by already created handle.

## <sub>Icon</sub>

`:Icon(icon, [offset]):` <mark style="color:purple;">**`nil`**</mark>

| Name                                                         | Type                                                          | Description                                   |
| ------------------------------------------------------------ | ------------------------------------------------------------- | --------------------------------------------- |
| **icon**                                                     | <mark style="color:purple;">**`string`**</mark>               | icon unicode.                                 |
| **offset&#x20;**<mark style="color:orange;">**`[?]`**</mark> | [<mark style="color:purple;">**`Vec2`**</mark>](../math/vec2) | Optional icon offset. `(default: {0.0, 0.0})` |

Sets widget's icon.\
[Icons list](https://fontawesome.com/search?o=r\&s=solid\&f=classic)

#### Example

```lua
--https://fontawesome.com/icons/user?f=classic&s=solid
switch:Icon("\u{f007}")
```

## <sub>SetCallback</sub>

{% hint style="info" %}
Multiple callbacks could be set.
{% endhint %}

\`:SetCallback(callback, \[forceCall]):\` <mark style="color:purple;">\*\*\`nil\`\*\*</mark>

| Name                                                            | Type                                                                     | Description                                                              |
| --------------------------------------------------------------- | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ |
| **callback**                                                    | <mark style="color:purple;">**`fun(this: CMenuSliderFloat):nil`**</mark> | function to be called on widget change.\\                                |
| **forceCall&#x20;**<mark style="color:orange;">**`[?]`**</mark> | <mark style="color:purple;">**`boolean`**</mark>                         | true if you want to call callback on widget creation. `(default: false)` |

Sets widget's on change callback.

## <sub>UnsetCallback</sub>

`:UnsetCallback(callback):` <mark style="color:purple;">**`nil`**</mark>

| Name         | Type                                                                     | Description                                     |
| ------------ | ------------------------------------------------------------------------ | ----------------------------------------------- |
| **callback** | <mark style="color:purple;">**`fun(this: CMenuSliderFloat):nil`**</mark> | function to be removed from widget's callbacks. |

Removes widget's on change callback.

## <sub>ColorPicker</sub>

`:ColorPicker(name, color):` [<mark style="color:purple;">**`CMenuColorPickerAttachment`**</mark>](cmenucolorpickerattachment)

| Name      | Type                                                       | Description             |
| --------- | ---------------------------------------------------------- | ----------------------- |
| **name**  | <mark style="color:purple;">**`string`**</mark>            | Name of the attachment. |
| **color** | [<mark style="color:purple;">**`Color`**</mark>](../color) | Default color.          |

Creates `CMenuColorPickerAttachment` and attaches it to the widget.

## <sub>Gear</sub>

`:Gear(name, [gearIcon], [useSmallFont]):` [<mark style="color:purple;">**`CMenuGearAttachment`**</mark>](cmenugearattachment)

| Name                                                               | Type                                             | Description                                     |
| ------------------------------------------------------------------ | ------------------------------------------------ | ----------------------------------------------- |
| **name**                                                           | <mark style="color:purple;">**`string`**</mark>  | Name of the attachment.                         |
| **gearIcon&#x20;**<mark style="color:orange;">**`[?]`**</mark>     | <mark style="color:purple;">**`string`**</mark>  | Gear FontAwesome icon. `(default: "\uf013")`    |
| **useSmallFont&#x20;**<mark style="color:orange;">**`[?]`**</mark> | <mark style="color:purple;">**`boolean`**</mark> | Use small font for gear icon. `(default: true)` |

Creates `CMenuGearAttachment` and attaches it to the widget.