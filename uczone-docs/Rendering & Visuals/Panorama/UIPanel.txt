# UIPanel

UIPanel metatable

## <sub>\_\_tostring</sub>

`:__tostring():` <mark style="color:purple;">**`nil`**</mark>

## <sub>\_\_eq</sub>

{% hint style="info" %}
Overload for operator ==.
{% endhint %}

`:__eq(other):` <mark style="color:purple;">**`boolean`**</mark>

| Name      | Type                                                        | Description |
| --------- | ----------------------------------------------------------- | ----------- |
| **other** | [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) |             |

## <sub>FindChild</sub>

`:FindChild(id):` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

| Name   | Type                                            | Description      |
| ------ | ----------------------------------------------- | ---------------- |
| **id** | <mark style="color:purple;">**`string`**</mark> | id of the child. |

Finds child by name.

## <sub>IsVisible</sub>

`:IsVisible():` <mark style="color:purple;">**`boolean`**</mark>

Returns visible state.

## <sub>SetVisible</sub>

`:SetVisible(newState):` <mark style="color:purple;">**`nil`**</mark>

| Name         | Type                                             | Description |
| ------------ | ------------------------------------------------ | ----------- |
| **newState** | <mark style="color:purple;">**`boolean`**</mark> |             |

Sets visible state.

## <sub>GetClassList</sub>

`:GetClassList():` <mark style="color:purple;">**`string[]`**</mark>

Returns class name list.

## <sub>FindChildInLayoutFile</sub>

`:FindChildInLayoutFile(id):` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

| Name   | Type                                            | Description |
| ------ | ----------------------------------------------- | ----------- |
| **id** | <mark style="color:purple;">**`string`**</mark> |             |

???.

## <sub>FindPanelInLayoutFile</sub>

`:FindPanelInLayoutFile(id):` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

| Name   | Type                                            | Description |
| ------ | ----------------------------------------------- | ----------- |
| **id** | <mark style="color:purple;">**`string`**</mark> |             |

???.

## <sub>FindChildTraverse</sub>

`:FindChildTraverse(id):` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

| Name   | Type                                            | Description |
| ------ | ----------------------------------------------- | ----------- |
| **id** | <mark style="color:purple;">**`string`**</mark> |             |

Recursive find child by id.

## <sub>GetChildCount</sub>

`:GetChildCount():` <mark style="color:purple;">**`integer`**</mark>

Returns child by count.

## <sub>GetChild</sub>

`:GetChild(index):` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                            | Description |
| --------- | ----------------------------------------------- | ----------- |
| **index** | <mark style="color:purple;">**`number`**</mark> |             |

Returns child by index.

## <sub>GetChildByPath</sub>

`:GetChildByPath(path, [bLogError]):` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

| Name                                                            | Type                                              | Description                                      |
| --------------------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------ |
| **path**                                                        | <mark style="color:purple;">**`string[]`**</mark> |                                                  |
| **bLogError&#x20;**<mark style="color:orange;">**`[?]`**</mark> | <mark style="color:purple;">**`boolean`**</mark>  | Log error if panel not found. `(default: false)` |

Returns child by path using FindChild.

## <sub>GetChildIndex</sub>

`:GetChildIndex():` <mark style="color:purple;">**`integer`**</mark>

Returns index in parent children list. Starts from 0.

## <sub>GetFirstChild</sub>

`:GetFirstChild():` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

Returns first child.

## <sub>GetLastChild</sub>

`:GetLastChild():` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

Returns last child.

## <sub>HasID</sub>

`:HasID():` <mark style="color:purple;">**`boolean`**</mark>

Returns `true` if the panel has an id.

## <sub>GetID</sub>

`:GetID():` <mark style="color:purple;">**`string`**</mark>

Returns id of panel.

## <sub>SetID</sub>

`:SetID(id):` <mark style="color:purple;">**`nil`**</mark>

| Name   | Type                                            | Description |
| ------ | ----------------------------------------------- | ----------- |
| **id** | <mark style="color:purple;">**`string`**</mark> |             |

Sets the panel's id.

## <sub>GetLayoutHeight</sub>

`:GetLayoutHeight():` <mark style="color:purple;">**`integer`**</mark>

Returns the panel height.

## <sub>GetLayoutWidth</sub>

`:GetLayoutWidth():` <mark style="color:purple;">**`integer`**</mark>

Returns the panel width.

## <sub>GetParent</sub>

`:GetParent():` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

Returns the panel's parent.

## <sub>GetRootParent</sub>

`:GetRootParent():` [<mark style="color:purple;">**`UIPanel`**</mark>](uipanel) | <mark style="color:purple;">**`nil`**</mark>

Returns the panel's root parent. ???

## <sub>GetXOffset</sub>

`:GetXOffset():` <mark style="color:purple;">**`integer`**</mark>

Returns the panel's relative X offset.

## <sub>GetYOffset</sub>

`:GetYOffset():` <mark style="color:purple;">**`integer`**</mark>

Returns the panel's relative Y offset.

## <sub>GetBounds</sub>

`:GetBounds([useJsFunc]):` <mark style="color:purple;">**`{x:number, y:number, w:number, h:number}`**</mark>

| Name                                                            | Type                                                                                             | Description                                                                 |
| --------------------------------------------------------------- | ------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------- |
| **useJsFunc&#x20;**<mark style="color:orange;">**`[?]`**</mark> | <mark style="color:purple;">**`boolean`**</mark> \| <mark style="color:purple;">**`nil`**</mark> | Use js GetPositionWithinWindow function to get position. `(default: false)` |

Returns the panel's bounds. Iterate over the parent hierarchy to get the absolute bounds.

## <sub>GetImageSrc</sub>

`:GetImageSrc():` <mark style="color:purple;">**`string`**</mark>

Return the panel source image.

## <sub>GetPanelType</sub>

`:GetPanelType():` <mark style="color:purple;">**`string`**</mark>

Returns the panel's type.

## <sub>BSetProperty</sub>

`:BSetProperty(key, value):` <mark style="color:purple;">**`boolean`**</mark>

| Name      | Type                                            | Description |
| --------- | ----------------------------------------------- | ----------- |
| **key**   | <mark style="color:purple;">**`string`**</mark> |             |
| **value** | <mark style="color:purple;">**`string`**</mark> |             |

Sets the panel property.

## <sub>SetStyle</sub>

`:SetStyle(cssString):` <mark style="color:purple;">**`boolean`**</mark>

| Name          | Type                                            | Description |
| ------------- | ----------------------------------------------- | ----------- |
| **cssString** | <mark style="color:purple;">**`string`**</mark> |             |

Sets the panel style.

#### Example

```lua
-- set_style.lua
local css_like_table = {
    ["horizontal-align"] = "center",
	["vertical-align"] = "center",
    ["transform"] = "translate3d( 0px, -0px, 0px ) scale3d(1, 1, 1)",
    ["padding-left"] = "0px",
    ["margin"] = "0px",
    ["border-radius"] = "4px",
    ["background-color"] = "none",
    ["box-shadow"] = "none",
    ["color"] = "gradient( linear, 0% 100%, 0% 0%, from( #ff00FF ), to( #5C9C68 ) )",
    ["font-size"] = "20px",
    ["text-align"] = "center",
    ["text-decoration"] = "none",
    ["background-size"] = "0% 0%",
    ["opacity-mask"] = 'url("s2r://panorama/images/masks/hudchat_mask_psd.vtex") 1.0',
    ["hue-rotation"] = "-10deg",
    ["text-shadow"] = "2px 2px #111111b0",
    ["blur"] = "gaussian(0px)",
    ["line-height"] = "120%",
    ["font-family"] = "Radiance",
    ["border-brush"] = "gradient( linear, 0% 0%, 0% 100%, from( #96c5ff96 ), to( #12142d2d ) )",
}


local function css_to_string(tbl)
    local str = ""
    for k, v in pairs(tbl) do
        str = str .. k .. ": " .. v .. "; "
    end
    return str;
end

local health_label = Panorama.GetPanelByName("HealthLabel");
if (health_label) then
    health_label:SetStyle(css_to_string(css_like_table))
end

```

## <sub>SetAttribute</sub>

`:SetAttribute(key, value):` <mark style="color:purple;">**`nil`**</mark>

| Name      | Type                                            | Description |
| --------- | ----------------------------------------------- | ----------- |
| **key**   | <mark style="color:purple;">**`string`**</mark> |             |
| **value** | <mark style="color:purple;">**`string`**</mark> |             |

Sets the panel's attribute.

## <sub>GetAttribute</sub>

`:GetAttribute(key, default):` <mark style="color:purple;">**`string`**</mark> | <mark style="color:purple;">**`nil`**</mark>

| Name        | Type                                            | Description |
| ----------- | ----------------------------------------------- | ----------- |
| **key**     | <mark style="color:purple;">**`string`**</mark> |             |
| **default** | <mark style="color:purple;">**`string`**</mark> |             |

Returns the panel's attribute.

## <sub>GetPositionWithinWindow</sub>

`:GetPositionWithinWindow():` [<mark style="color:purple;">**`Vec2`**</mark>](../../../cheats-types-and-callbacks/classes/math/vec2)

Returns the panel's window position. Not sure about optimization.

## <sub>GetText</sub>

{% hint style="info" %}
This method is only available for Label panels.
{% endhint %}

`:GetText():` <mark style="color:purple;">**`string`**</mark>

Returns the label panel's text.

## <sub>SetText</sub>

{% hint style="info" %}
This method is only available for Label panels.
{% endhint %}

`:SetText(text):` <mark style="color:purple;">**`nil`**</mark>

| Name     | Type                                            | Description |
| -------- | ----------------------------------------------- | ----------- |
| **text** | <mark style="color:purple;">**`string`**</mark> |             |

Sets the label panel's text.

## <sub>GetTextType</sub>

{% hint style="info" %}
This method is only available for Label panels.
{% endhint %}

`:GetTextType():` <mark style="color:purple;">**`integer`**</mark>

Gets the label panel's text type. (2 = plain, 3 = html)

## <sub>SetTextType</sub>

{% hint style="info" %}
This method is only available for Label panels.
{% endhint %}

\`:SetTextType(new):\` <mark style="color:purple;">\*\*\`nil\`\*\*</mark>

| Name    | Type                                             | Description |
| ------- | ------------------------------------------------ | ----------- |
| **new** | <mark style="color:purple;">**`integer`**</mark> | value       |

Sets the label panel's text type. (2 = plain, 3 = html). Should always set text type before setting the text

#### Example

```lua

label_panel:SetTextType(3)
label_panel:SetText("<font color='#8BFFD8'>Vitória</font>")
```

## <sub>IsValid</sub>

`:IsValid():` <mark style="color:purple;">**`boolean`**</mark>

Checks if the panel is valid

## <sub>HasClass</sub>

`:HasClass(className):` <mark style="color:purple;">**`boolean`**</mark>

| Name          | Type                                            | Description |
| ------------- | ----------------------------------------------- | ----------- |
| **className** | <mark style="color:purple;">**`string`**</mark> | Class name. |

Checks if the panel has a class.

## <sub>AddClasses</sub>

`:AddClasses(classNames):` <mark style="color:purple;">**`nil`**</mark>

| Name           | Type                                            | Description                                 |
| -------------- | ----------------------------------------------- | ------------------------------------------- |
| **classNames** | <mark style="color:purple;">**`string`**</mark> | Could be a space separated list of classes. |

Adds a class to the panel.

## <sub>RemoveClasses</sub>

`:RemoveClasses(classNames):` <mark style="color:purple;">**`nil`**</mark>

| Name           | Type                                            | Description                                 |
| -------------- | ----------------------------------------------- | ------------------------------------------- |
| **classNames** | <mark style="color:purple;">**`string`**</mark> | Could be a space separated list of classes. |

Removes a class to the panel.
