# Item

Table to work with `CItem`.

<mark style="color:purple;">**`CItem`**</mark> extends <mark style="color:purple;">**`CAbility`**</mark>

## <sub>IsCombinable</sub>

`Item.IsCombinable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item is combinable. I'm not sure if non-combinable items even exist.

## <sub>IsPermanent</sub>

`Item.IsPermanent(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item is permanent. I'm not sure what permanent items is, but for items with stacks this function returns `false`.

## <sub>IsStackable</sub>

`Item.IsStackable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item is stackable. e.g tangoes, wards, etc.

## <sub>IsRecipe</sub>

`Item.IsRecipe(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item is recipe.

## <sub>GetSharability</sub>

`Item.GetSharability(item):` [<mark style="color:purple;">**`Enum.ShareAbility`**</mark>](../../../cheats-types-and-callbacks/enums#enum.shareability)

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns item's sharability type.

## <sub>IsDroppable</sub>

`Item.IsDroppable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item is droppable.

## <sub>IsPurchasable</sub>

`Item.IsPurchasable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item is purchasable.

## <sub>IsSellable</sub>

`Item.IsSellable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item is sellable.

## <sub>RequiresCharges</sub>

`Item.RequiresCharges(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if the item requires charges. e.g. urn, vessel etc.

## <sub>IsKillable</sub>

`Item.IsKillable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if item is destroyable by autoatack.

## <sub>IsDisassemblable</sub>

`Item.IsDisassemblable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if item is disassemblable.

## <sub>IsAlertable</sub>

`Item.IsAlertable(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if item is alertable. e.g. smoke, mekansm, arcane boots etc.

## <sub>GetInitialCharges</sub>

`Item.GetInitialCharges(item):` <mark style="color:purple;">**`integer`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns initial charges of the item. e.g. 3 for bottle, 1 for dust etc.

## <sub>CastsOnPickup</sub>

`Item.CastsOnPickup(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

No idea what this function does.

## <sub>GetCurrentCharges</sub>

`Item.GetCurrentCharges(item):` <mark style="color:purple;">**`integer`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns amount of current charges.

## <sub>GetSecondaryCharges</sub>

`Item.GetSecondaryCharges(item):` <mark style="color:purple;">**`integer`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns amount of secondary charges. e.g. pack of both type of wards.

## <sub>IsCombineLocked</sub>

`Item.IsCombineLocked(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if item locked for combining.

## <sub>IsMarkedForSell</sub>

`Item.IsMarkedForSell(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if item is marked for sell.

## <sub>GetPurchaseTime</sub>

`Item.GetPurchaseTime(item):` <mark style="color:purple;">**`number`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns the game time when the item was purchased. If the item was assembled from other items, It returns the purchase time of the item that had the lowest\
index at the moment of assembling.

## <sub>GetAssembledTime</sub>

`Item.GetAssembledTime(item):` <mark style="color:purple;">**`number`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns the game time when the item was assembled. If the item was not assembled, returns time when the item was purchased.

## <sub>PurchasedWhileDead</sub>

`Item.PurchasedWhileDead(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `true` if item was purchased while dead.

## <sub>CanBeUsedOutOfInventory</sub>

`Item.CanBeUsedOutOfInventory(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

No idea which specific item example could be used out of inventory.

## <sub>IsItemEnabled</sub>

`Item.IsItemEnabled(item):` <mark style="color:purple;">**`boolean`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns `false` if item has CD after moving from stash.

## <sub>GetEnableTime</sub>

{% hint style="info" %}
Could be less than current game time if item is already enabled.
{% endhint %}

`Item.GetEnableTime(item):` <mark style="color:purple;">**`number`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns game time when item will be enabled.

## <sub>GetPlayerOwnerID</sub>

`Item.GetPlayerOwnerID(item):` <mark style="color:purple;">**`integer`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns player ID who owns the item.

## <sub>GetCost</sub>

`Item.GetCost(item):` <mark style="color:purple;">**`integer`**</mark>

| Name     | Type                                                   | Description |
| -------- | ------------------------------------------------------ | ----------- |
| **item** | [<mark style="color:purple;">**`CItem`**</mark>](item) |             |

Returns item cost.

## <sub>GetStockCount</sub>

{% hint style="info" %}
Item id can be found in \`assets/data/items.json\` file in cheat folder.
{% endhint %}

\`Item.GetStockCount(item\_id, \[team]):\` <mark style="color:purple;">\*\*\`integer\`\*\*</mark>

| Name                                                       | Type                                                                                                            | Description                                                                        |
| ---------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
| **item\_id**                                               | <mark style="color:purple;">**`integer`**</mark>                                                                |                                                                                    |
| **team&#x20;**<mark style="color:orange;">**`[?]`**</mark> | [<mark style="color:purple;">**`Enum.TeamNum`**</mark>](../../../cheats-types-and-callbacks/enums#enum.teamnum) | - Optional. Default is local player's team. `(default: Enum.TeamNum.TEAM_RADIANT)` |

Returns amount of remaining items in shop by item id.

#### Example

```lua
-- "item_ward_observer": {
--     "ID": "42",
Log.Write("Observers available: " .. Item.GetStockCount(42))
```
