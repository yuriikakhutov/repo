# Modifier

Table to work with `CModifier`.\
You can get modifiers from `NPC.GetModifier`function.

## <sub>GetName</sub>

`Modifier.GetName(modifier):` <mark style="color:purple;">**`string`**</mark>

| Name         | Type                                                           | Description             |
| ------------ | -------------------------------------------------------------- | ----------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get name of |

Returns the name of the modifier.

## <sub>GetClass</sub>

`Modifier.GetClass(modifier):` <mark style="color:purple;">**`string`**</mark>

| Name         | Type                                                           | Description |
| ------------ | -------------------------------------------------------------- | ----------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) |             |

Returns the name of the modifier's class.

## <sub>GetModifierAura</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetModifierAura(modifier):` <mark style="color:purple;">**`string`**</mark>

| Name         | Type                                                           | Description             |
| ------------ | -------------------------------------------------------------- | ----------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get aura of |

Should return the name of the modifier's aura, but instead, it returns an empty string in all\
the cases I have tested.

## <sub>GetSerialNumber</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetSerialNumber(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                      |
| ------------ | -------------------------------------------------------------- | -------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get serial number of |

Should return the serial number of the modifier, but instead, it returns 0 in all the cases I\
have tested.

## <sub>GetStringIndex</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetStringIndex(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                     |
| ------------ | -------------------------------------------------------------- | ------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get string index of |

Should return the string index of the modifier, but instead, it returns 0 in all the cases I\
have tested.

## <sub>GetIndex</sub>

`Modifier.GetIndex(modifier):` <mark style="color:purple;">**`GetIndex`**</mark>

| Name         | Type                                                           | Description              |
| ------------ | -------------------------------------------------------------- | ------------------------ |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get index of |

Returns the hero's modifier index. The index is an incrementable value with each new modifier\
the NPC gets

## <sub>GetCreationTime</sub>

`Modifier.GetCreationTime(modifier):` <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description                      |
| ------------ | -------------------------------------------------------------- | -------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get creation time of |

Returns the game time when the modifier was created.

## <sub>GetCreationFrame</sub>

`Modifier.GetCreationFrame(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                       |
| ------------ | -------------------------------------------------------------- | --------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get creation frame of |

Returns the frame when the modifier was created. You could get current frame count from\
`GlobalVars.GetFrameCount` function.

## <sub>GetLastAppliedTime</sub>

`Modifier.GetLastAppliedTime(modifier):` <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description                          |
| ------------ | -------------------------------------------------------------- | ------------------------------------ |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get last applied time of |

Returns the game time when the modifier was last applied. Don't know cases when it can be\
different from `GetCreationTime`.

## <sub>GetDuration</sub>

`Modifier.GetDuration(modifier):` <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description                 |
| ------------ | -------------------------------------------------------------- | --------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get duration of |

Returns the duration of the modifier.

## <sub>GetDieTime</sub>

`Modifier.GetDieTime(modifier):` <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description                        |
| ------------ | -------------------------------------------------------------- | ---------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get expiration time of |

Returns the game time when the modifier will expire.

## <sub>GetStackCount</sub>

`Modifier.GetStackCount(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                    |
| ------------ | -------------------------------------------------------------- | ------------------------------ |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get stack count of |

If there are stacks of the modifier, it returns the amount of stacks; otherwise, it returns\
0\.

## <sub>GetAuraSearchTeam</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetAuraSearchTeam(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                         |
| ------------ | -------------------------------------------------------------- | ----------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get aura search team of |

Returns aura search team of the modifier.

## <sub>GetAuraSearchType</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetAuraSearchType(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                         |
| ------------ | -------------------------------------------------------------- | ----------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get aura search type of |

Returns aura search type of the modifier.

## <sub>GetAuraSearchFlags</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetAuraSearchFlags(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                          |
| ------------ | -------------------------------------------------------------- | ------------------------------------ |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get aura search flags of |

Returns aura search flags of the modifier.

## <sub>GetAuraRadius</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetAuraRadius(modifier):` <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description                    |
| ------------ | -------------------------------------------------------------- | ------------------------------ |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get aura radius of |

Returns aura radius of the modifier.

## <sub>GetTeam</sub>

`Modifier.GetTeam(modifier):` [<mark style="color:purple;">**`Enum.TeamType`**</mark>](../../../cheats-types-and-callbacks/enums#enum.teamtype)

| Name         | Type                                                           | Description             |
| ------------ | -------------------------------------------------------------- | ----------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get team of |

Returns team of the modifier.

## <sub>GetAttributes</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetAttributes(modifier):` <mark style="color:purple;">**`integer`**</mark>

| Name         | Type                                                           | Description                   |
| ------------ | -------------------------------------------------------------- | ----------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get attributes of |

Returns the attributes of the modifier.

## <sub>IsAura</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.IsAura(modifier):` <mark style="color:purple;">**`boolean`**</mark>

| Name         | Type                                                           | Description       |
| ------------ | -------------------------------------------------------------- | ----------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to check |

Returns `true` if the modifier is an aura.

## <sub>IsAuraActiveOnDeath</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.IsAuraActiveOnDeath(modifier):` <mark style="color:purple;">**`boolean`**</mark>

| Name         | Type                                                           | Description       |
| ------------ | -------------------------------------------------------------- | ----------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to check |

Returns `true` if the modifier aura active on death.

## <sub>GetMarkedForDeletion</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetMarkedForDeletion(modifier):` <mark style="color:purple;">**`boolean`**</mark>

| Name         | Type                                                           | Description       |
| ------------ | -------------------------------------------------------------- | ----------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to check |

Returns `true` if the modifier is marked for deletion.

## <sub>GetAuraIsHeal</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetAuraIsHeal(modifier):` <mark style="color:purple;">**`boolean`**</mark>

| Name         | Type                                                           | Description       |
| ------------ | -------------------------------------------------------------- | ----------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to check |

Returns `true` if aura is heal.

## <sub>GetProvidedByAura</sub>

`Modifier.GetProvidedByAura(modifier):` <mark style="color:purple;">**`boolean`**</mark>

| Name         | Type                                                           | Description       |
| ------------ | -------------------------------------------------------------- | ----------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to check |

Returns `true` if modifier is provided by an aura.

## <sub>GetPreviousTick</sub>

`Modifier.GetPreviousTick(modifier):` <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description                       |
| ------------ | -------------------------------------------------------------- | --------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get last tick time of |

Returns the game time of the last modifier tick (\~0.033 seconds).

## <sub>GetThinkInterval</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

`Modifier.GetThinkInterval(modifier):` <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description                       |
| ------------ | -------------------------------------------------------------- | --------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get think interval of |

Returns the modifier's think interval.

## <sub>GetThinkTimeAccumulator</sub>

{% hint style="info" %}
Deprecated.
{% endhint %}

\`Modifier.GetThinkTimeAccumulator(modifier):\` <mark style="color:purple;">\*\*\`number\`\*\*</mark>

| Name         | Type                                                           | Description                               |
| ------------ | -------------------------------------------------------------- | ----------------------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get think time accumulator of |

Return the modifier's think interval time accumulator.

## <sub>IsCurrentlyInAuraRange</sub>

`Modifier.IsCurrentlyInAuraRange(modifier):` <mark style="color:purple;">**`boolean`**</mark>

| Name         | Type                                                           | Description       |
| ------------ | -------------------------------------------------------------- | ----------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to check |

Returns `true` if is in aura range.

## <sub>GetAbility</sub>

`Modifier.GetAbility(modifier):` [<mark style="color:purple;">**`CAbility`**</mark>](ability)

| Name         | Type                                                           | Description                |
| ------------ | -------------------------------------------------------------- | -------------------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get ability of |

Returns the modifier's ability.

## <sub>GetAuraOwner</sub>

`Modifier.GetAuraOwner(modifier):` [<mark style="color:purple;">**`CEntity`**</mark>](entity) | <mark style="color:purple;">**`nil`**</mark>

| Name         | Type                                                           | Description |
| ------------ | -------------------------------------------------------------- | ----------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier    |

Returns the owner of aura

## <sub>GetParent</sub>

`Modifier.GetParent(modifier):` [<mark style="color:purple;">**`CEntity`**</mark>](entity) | <mark style="color:purple;">**`nil`**</mark>

| Name         | Type                                                           | Description |
| ------------ | -------------------------------------------------------------- | ----------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier    |

Returns the parent of modifier

## <sub>GetCaster</sub>

`Modifier.GetCaster(modifier):` [<mark style="color:purple;">**`CEntity`**</mark>](entity) | <mark style="color:purple;">**`nil`**</mark>

| Name         | Type                                                           | Description |
| ------------ | -------------------------------------------------------------- | ----------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier    |

Returns caster of modifier

## <sub>GetState</sub>

`Modifier.GetState(modifier):` <mark style="color:purple;">**`number`**</mark>, <mark style="color:purple;">**`number`**</mark>

| Name         | Type                                                           | Description              |
| ------------ | -------------------------------------------------------------- | ------------------------ |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get state of |

Returns the modifier state masks. See the example.

#### Example

```lua
local m_nEnabledStateMask, m_nDisabledStateMask = Modifier.GetState(mod)
local mod_is_hex = (m_nEnabledStateMask >> Enum.ModifierState.MODIFIER_STATE_HEXED & 1) > 0
local mod_is_stun = (m_nEnabledStateMask >> Enum.ModifierState.MODIFIER_STATE_STUNNED & 1) > 0
```

## <sub>IsDebuff</sub>

`Modifier.IsDebuff(modifier):` <mark style="color:purple;">**`boolean`**</mark>

| Name         | Type                                                           | Description       |
| ------------ | -------------------------------------------------------------- | ----------------- |
| **modifier** | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to check |

Returns `true` if the modifier is a debuff.

## <sub>GetField</sub>

`Modifier.GetField(modifier, fieldName, [dbgPrint]):` <mark style="color:purple;">**`any`**</mark>

| Name                                                           | Type                                                           | Description                              |
| -------------------------------------------------------------- | -------------------------------------------------------------- | ---------------------------------------- |
| **modifier**                                                   | [<mark style="color:purple;">**`CModifier`**</mark>](modifier) | modifier to get field from               |
| **fieldName**                                                  | <mark style="color:purple;">**`string`**</mark>                | field name                               |
| **dbgPrint&#x20;**<mark style="color:orange;">**`[?]`**</mark> | <mark style="color:purple;">**`boolean`**</mark>               | print possible errors `(default: false)` |

Returns value of the field.
