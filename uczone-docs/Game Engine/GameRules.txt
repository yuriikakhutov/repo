# GameRules

Table to work with GameRules.

## <sub>GetServerGameState</sub>

`GameRules.GetServerGameState():` [<mark style="color:purple;">**`Enum.GameState`**</mark>](../../../cheats-types-and-callbacks/enums#enum.gamestate)

Returns the current server game state.

## <sub>GetGameState</sub>

`GameRules.GetGameState():` [<mark style="color:purple;">**`Enum.GameState`**</mark>](../../../cheats-types-and-callbacks/enums#enum.gamestate)

Returns the current game state.

## <sub>GetGameMode</sub>

`GameRules.GetGameMode():` [<mark style="color:purple;">**`Enum.GameMode`**</mark>](../../../cheats-types-and-callbacks/enums#enum.gamemode)

Returns the current game mode.

## <sub>GetPreGameStartTime</sub>

{% hint style="info" %}
Pregame time is the time before the game starts, e.g. ban phase, pick time.
{% endhint %}

`GameRules.GetPreGameStartTime():` <mark style="color:purple;">**`number`**</mark>

Returns pregame duration or 0 if now is pregame time.

## <sub>GetGameStartTime</sub>

{% hint style="info" %}
Game start time is 0:00 on ingame timer.
{% endhint %}

`GameRules.GetGameStartTime():` <mark style="color:purple;">**`number`**</mark>

Returns game start time duration or 0 if game is not start yet.

## <sub>GetGameEndTime</sub>

`GameRules.GetGameEndTime():` <mark style="color:purple;">**`number`**</mark>

Returns game end time or 0 if game is not end yet.

## <sub>GetGameLoadTime</sub>

`GameRules.GetGameLoadTime():` <mark style="color:purple;">**`number`**</mark>

No idea what this function does. Returns 0 in all cases what I've tested.

## <sub>GetGameTime</sub>

{% hint style="info" %}
Can be used to calculate time in an in-game timer. See the example.
{% endhint %}

`GameRules.GetGameTime():` <mark style="color:purple;">**`number`**</mark>

Returns the current game time. Starts counting from pregame state.

#### Example

```lua
local game_time = GameRules.GetGameTime();
local ingame_timer = game_time - GameRules.GetGameStartTime();
Log.Write(string.format("Current time: %d:%02d", math.floor(ingame_timer / 60),
math.floor(ingame_timer % 60)))
```

## <sub>IsPaused</sub>

`GameRules.IsPaused():` <mark style="color:purple;">**`boolean`**</mark>

Returns `true` if game is paused.

## <sub>IsTemporaryDay</sub>

{% hint style="info" %}
Example: Phoenix's Supernova.
{% endhint %}

`GameRules.IsTemporaryDay():` <mark style="color:purple;">**`boolean`**</mark>

Returns `true` if it's temporary day.

## <sub>IsTemporaryNight</sub>

{% hint style="info" %}
Example: Luna's Eclipse.
{% endhint %}

`GameRules.IsTemporaryNight():` <mark style="color:purple;">**`boolean`**</mark>

Returns `true` if it's temporary night.

## <sub>IsNightstalkerNight</sub>

`GameRules.IsNightstalkerNight():` <mark style="color:purple;">**`boolean`**</mark>

Returns `true` if it's nightstalker's night.

## <sub>GetMatchID</sub>

`GameRules.GetMatchID():` <mark style="color:purple;">**`integer`**</mark>

Returns current match id.

## <sub>GetLobbyID</sub>

`GameRules.GetLobbyID():` <mark style="color:purple;">**`integer`**</mark>

Returns current lobby id.

## <sub>GetGoodGlyphCD</sub>

{% hint style="info" %}
Could be less than current game time if glyph is already available.
{% endhint %}

`GameRules.GetGoodGlyphCD():` <mark style="color:purple;">**`number`**</mark>

Returns game time when next radiant glyph will be available.

## <sub>GetBadGlyphCD</sub>

{% hint style="info" %}
Could be less than current game time if glyph is already available.
{% endhint %}

`GameRules.GetBadGlyphCD():` <mark style="color:purple;">**`number`**</mark>

Returns game time when next dire glyph will be available.

## <sub>GetGoodScanCD</sub>

{% hint style="info" %}
Could be less than current game time if scan is already available.
{% endhint %}

`GameRules.GetGoodScanCD():` <mark style="color:purple;">**`number`**</mark>

Returns game time when next radiant scan will be available.

## <sub>GetBadScanCD</sub>

{% hint style="info" %}
Could be less than current game time if scan is already available.
{% endhint %}

`GameRules.GetBadScanCD():` <mark style="color:purple;">**`number`**</mark>

Returns game time when next dire scan will be available.

## <sub>GetGoodScanCharges</sub>

`GameRules.GetGoodScanCharges():` <mark style="color:purple;">**`integer`**</mark>

Returns current radiant scan charges.

## <sub>GetGoodScanCharges</sub>

`GameRules.GetGoodScanCharges():` <mark style="color:purple;">**`integer`**</mark>

Returns current dire scan charges.

## <sub>GetStockCount</sub>

{% hint style="info" %}
Item id can be found in \`assets/data/items.json\` file in cheat folder.
{% endhint %}

\`GameRules.GetStockCount(item\_id, \[team]):\` <mark style="color:purple;">\*\*\`integer\`\*\*</mark>

| Name                                                       | Type                                                                                                            | Description                                                                        |
| ---------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
| **item\_id**                                               | <mark style="color:purple;">**`integer`**</mark>                                                                |                                                                                    |
| **team&#x20;**<mark style="color:orange;">**`[?]`**</mark> | [<mark style="color:purple;">**`Enum.TeamNum`**</mark>](../../../cheats-types-and-callbacks/enums#enum.teamnum) | - Optional. Default is local player's team. `(default: Enum.TeamNum.TEAM_RADIANT)` |

Returns amount of remaining items in shop by item id.

#### Example

```lua
-- "item_ward_observer": {
--     "ID": "42",
Log.Write("Observers available: " .. GameRules.GetStockCount(42))
```

## <sub>GetNextCycleTime</sub>

`GameRules.GetNextCycleTime():` <mark style="color:purple;">**`number`**</mark>, <mark style="color:purple;">**`boolean`**</mark>

Return time remaining to the next cycle.

## <sub>GetDaytimeStart</sub>

`GameRules.GetDaytimeStart():` <mark style="color:purple;">**`number`**</mark>

Returns day start time. To work with it use `GameRules.GetTimeOfDay`

## <sub>GetNighttimeStart</sub>

`GameRules.GetNighttimeStart():` <mark style="color:purple;">**`number`**</mark>

Returns night start time. To work with it use `GameRules.GetTimeOfDay`

## <sub>GetTimeOfDay</sub>

`GameRules.GetTimeOfDay():` <mark style="color:purple;">**`number`**</mark>

Returns current time of day time.

## <sub>IsInBanPhase</sub>

`GameRules.IsInBanPhase():` <mark style="color:purple;">**`boolean`**</mark>

Returns `true` if game is in ban phase.

## <sub>GetAllDraftPhase</sub>

`GameRules.GetAllDraftPhase():` <mark style="color:purple;">**`integer`**</mark>

Returns index of the current draft phase.

## <sub>IsAllDraftPhaseRadiantFirst</sub>

`GameRules.IsAllDraftPhaseRadiantFirst():` <mark style="color:purple;">**`boolean`**</mark>

Returns `true` if Radiant picks first.

## <sub>GetDOTATime</sub>

`GameRules.GetDOTATime([pregame], [negative]):` <mark style="color:purple;">**`number`**</mark>

| Name                                                           | Type                                             | Description                                          |
| -------------------------------------------------------------- | ------------------------------------------------ | ---------------------------------------------------- |
| **pregame&#x20;**<mark style="color:orange;">**`[?]`**</mark>  | <mark style="color:purple;">**`boolean`**</mark> | If `true` includes pregame time. `(default: false)`  |
| **negative&#x20;**<mark style="color:orange;">**`[?]`**</mark> | <mark style="color:purple;">**`boolean`**</mark> | If `true` includes negative time. `(default: false)` |

Returns the actual DOTA in-game clock time.

## <sub>GetLobbyObjectJson</sub>

`GameRules.GetLobbyObjectJson():` <mark style="color:purple;">**`string`**</mark> | <mark style="color:purple;">**`nil`**</mark>

Returns CSODOTALobby protobuf object as JSON string.

## <sub>GetBannedHeroes</sub>

`GameRules.GetBannedHeroes():` <mark style="color:purple;">**`integer[]`**</mark> | <mark style="color:purple;">**`nil`**</mark>

Returns zero-based array of banned heroes where index corresponds to the player id.

## <sub>GetStateTransitionTime</sub>

`GameRules.GetStateTransitionTime():` <mark style="color:purple;">**`number`**</mark>

Returns time remaining between state changes.
