# NetChannel

Table to work with game's net channel.

## <sub>GetLatency</sub>

`NetChannel.GetLatency([flow]):` <mark style="color:purple;">**`number`**</mark>

| Name                                                       | Type                                                                                                      | Description                                                 |
| ---------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------- |
| **flow&#x20;**<mark style="color:orange;">**`[?]`**</mark> | [<mark style="color:purple;">**`Enum.Flow`**</mark>](../../../cheats-types-and-callbacks/enums#enum.flow) | flow to get latency of `(default: Enum.Flow.FLOW_OUTGOING)` |

Returns the latency/ping of the net channel in seconds.

## <sub>GetAvgLatency</sub>

`NetChannel.GetAvgLatency([flow]):` <mark style="color:purple;">**`number`**</mark>

| Name                                                       | Type                                                                                                      | Description                                                         |
| ---------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |
| **flow&#x20;**<mark style="color:orange;">**`[?]`**</mark> | [<mark style="color:purple;">**`Enum.Flow`**</mark>](../../../cheats-types-and-callbacks/enums#enum.flow) | flow to get average latency of `(default: Enum.Flow.FLOW_OUTGOING)` |

Returns the average latency/ping of the net channel in seconds.

## <sub>SendNetMessage</sub>

{% hint style="info" %}
You can repeat the same message from OnSendNetMessage if you want to know the format of the message.
{% endhint %}

\`NetChannel.SendNetMessage(name, json):\` <mark style="color:purple;">\*\*\`nil\`\*\*</mark>

| Name     | Type                                            | Description             |
| -------- | ----------------------------------------------- | ----------------------- |
| **name** | <mark style="color:purple;">**`string`**</mark> | name of the net message |
| **json** | <mark style="color:purple;">**`string`**</mark> | json of the net message |

Sends a protobuff message to the game server. [List of messages](https://github.com/SteamDatabase/GameTracking-Dota2/blob/master/Protobufs),

#### Example

```lua
-- send_netmsg.lua
-- import json encoder
local JSON = require('assets.JSON');

-- https://github.com/SteamDatabase/GameTracking-Dota2/blob/master/Protobufs/dota_clientmessages.proto#L395
-- message CDOTAClientMsg_RollDice {
-- 	optional uint32 channel_type = 1;
-- 	optional uint32 roll_min = 2;
-- 	optional uint32 roll_max = 3;
-- }
NetChannel.SendNetMessage("CDOTAClientMsg_RollDice", JSON:encode({
    channel_type = 13,
    roll_min = 11,
    roll_max = 222
}));


```
